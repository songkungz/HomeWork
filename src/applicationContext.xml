<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 创建数据源对象，连接数据库 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql:///mydb"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
	</bean>
	
	<!-- 创建 sqlSessionFactory对象，需要给此对象设置数据源及mybatis配置文件的位置 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:mybatis.xml"></property>
	</bean>
	
 	<!-- 配置扫描器，用于扫描dao包中的Dao接口，创建dao对象 -->
	 <bean id="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
	 	<property name="basePackage" value="com.gz.dao"></property>
	 </bean>
	 
	 <!-- 指定service包，后面可以使用@Service注解的方式创建service对象 -->
	<context:component-scan base-package="com.gz.service"></context:component-scan>
	
 
    <!-- 支持文件上传 -->
    <bean id="multipartResolver"
     class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 设置文件上传最大值为1000MB -->
    <property name="maxUploadSize">
      <value>1048576000</value>
    </property>
    <property name="maxInMemorySize">
      <value>4096</value>
    </property>
    <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
         <!-- 安全管理器 -->
         <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
            <property name="realm" ref="ShiroRealm" />
            <!-- <property name="sessionManager" ref="sessionManager"/> -->
                    <!-- 使用下面配置的缓存管理器 -->
            <!-- <property name="cacheManager" ref="cacheManager" /> -->
        </bean>

        <!-- Realm实现:項目自定义的Realm -->
        <bean id="ShiroRealm" class="com.gz.controller.ShiroRealm" >
       		<property name="credentialsMatcher" >
        			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        				<property name="hashAlgorithmName" value="MD5"></property>
        				<property name="hashIterations" value="1024"></property>
        			</bean>
        	</property>
        </bean>

        <!-- Shiro Filter   Shiro的Web过滤器 -->
        <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
            <property name="securityManager" ref="securityManager" />   
            <!-- 如果你没有登录,访问有登录验证的请求,都会跳转到/login.jsp页面 -->  
            <property name="loginUrl" value="/login.jsp" />        
            <!-- 登录成功跳转的页面 -->
            <property name="successUrl" value="/index.jsp" /> 
            <!-- 没有权限跳转的页面 -->
            <property name="unauthorizedUrl" value="/loginIndex" />
                <!-- anon:匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤
                     authc:如果没有登录会跳到相应的登录页面登录 
                          表示访问该地址用户【必须身份验证通过】（Subject. isAuthenticated()==true）
                     user:用户拦截器，用户已经身份验证/记住我登录的都可 -->
            <property name="filterChainDefinitions">
            <value>
                     <!--   /css/**= anon
                    /images/**= anon
                   /img/** =anon
                    /js/** =anon
                   /editor/** =anon
                    /platform/** =anon
                    /jquery.fileupload/** =anon
                    /fonts/** =anon
                       /login.jsp = anon
                       /index.jsp =anon -->
                      /** = anon
                     
                </value>
            </property>
        </bean>
       <!-- 缓存管理器 使用Ehcache实现-->  
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">  
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>  
    </bean>  

      <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>